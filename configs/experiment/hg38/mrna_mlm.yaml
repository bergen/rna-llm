# @package _global_
defaults:
  - /pipeline: mrna
  - override /scheduler: cosine_warmup_timm

model:
  _name_: bert
  vocab_size: 11
  hidden_size: 768
  num_hidden_layers: 12
  num_attention_heads: 8
  intermediate_size: 3072
  hidden_act: "gelu_new"
  hidden_dropout_prob: 0.1
  attention_probs_dropout_prob: 0.1
  max_position_embeddings: 4096
  type_vocab_size: 2
  initializer_range: 0.02
  layer_norm_eps: 1e-12
  pad_token_id: 4
  position_embedding_type: "absolute"
  use_cache: True
  classifier_dropout: None
  use_flash_attn: True
  fused_mlp: False
  fused_bias_fc: False

task:
  _name_: mlm
  mask_prob: 0.3 # probability of masking a token
  replace_prob: 0.9 # probability of replacing a token with <mask>, conditional on choosing to mask it
  random_token_prob: 0.03 # probability of replacing a token with a random one
  num_tokens: 4
  pad_token_id: 4
  mask_token_id: 3
  mask_ignore_token_ids: [0, 1, 2]
  loss:
    _name_: cross_entropy  # used to ignore pad value/positions in labels
    ignore_index: 4  #  as noted in CharTokenizer

trainer:
  accelerator: gpu
  devices: 1
  num_nodes: 1
  accumulate_grad_batches: ${div_up:${train.global_batch_size}, ${eval:${trainer.devices} * ${dataset.batch_size} * ${trainer.num_nodes}}}
  max_epochs: 1
  precision: 16  # bf16 only a100
  gradient_clip_val: 1.0
  # strategy: null

dataset:
  # batch_size: 32  # Per GPU
  batch_size: 256
  max_length: 1024 # 262144, 524288
  # optional, default is max_length
  max_length_val: ${dataset.max_length}
  max_length_test: ${dataset.max_length}
  tokenizer_name: char
  pad_max_length: null  # needed for bpe tokenizer
  add_eos: true
  rc_aug: false
  num_workers: 12
  use_fixed_len_val: false  # placing a fixed length val here, but it's really the test

scheduler:
  t_in_epochs: False
  t_initial: ${eval:${div_up:${dataset.__train_len}, ${train.global_batch_size}} * ${trainer.max_epochs}}
  warmup_lr_init: 1e-6
  warmup_t: ${eval:${div_up:${dataset.__train_len}, ${train.global_batch_size}} * ${trainer.max_epochs} * 0.01}
  lr_min: ${eval:0.1 * ${optimizer.lr}}

optimizer:
  lr: 6e-4
  weight_decay: 0.1

train:
  gpu_mem: ${eval:"round(float(__import__('subprocess').check_output('nvidia-smi -i 0 --query-gpu=memory.total --format=csv,noheader,nounits', shell=True).strip().decode()) / 1000)"}
  seed: 2222
  global_batch_size: 256  # effects the scheduler, need to set properly